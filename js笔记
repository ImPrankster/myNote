#函数
1.Call Stack
  代码执行是一个进栈出栈的过程 执行到的时候进栈 执行结束出栈

2.this&arguments
  this是函数和对象的羁绊
  person.sayHi() = person.sayHi().call(person)
  bind 相当于定义一个函数返回一个带apply绑定this的原函数
  词法作用域：静态作用域

3.柯里化
  把一个函数的一个参数固定下来 得到一个新的函数
  通过保存闭包函数 获取return的函数 实现减少变量

4.高阶函数
  输入或者输出一个函数的函数 或者两者都是

5.回调函数和构造函数
  回调函数 callback 被当作参数的函数并被调用
  返回对象的函数就是构造函数

#异步
  1.await模拟同步 进行赋值操作的话 会等后面函数执行完毕再进行赋值
  2.async定义函数为异步函数

#面向对象
  1.封装：隐藏细节
  2.继承：复用
  3.多态：灵活
  4.基本类型(存值)
    引用类型(复杂引用对象)
  5.对象的类型 对象数组函数
  6.对象中的函数跟对象本身除了地址保存外没有任何关系
  7.函数是一等公民
  8.函数第一个参数是this 第二个是其他参数arguments
  9.函数参数的值只有在参数的时候才能确定 this的值只有传参的时候才能确定
  10.事件的this是触发事件的元素
  11.jQ中事件的this指向当前正在执行事件的元素或者与selector相匹配的元素
  12.vue中this指向new出来的对象
  13.箭头函数不会修改this指向
  14.bind创建一个新的函数 并自动call
  15.构造函数首字母大写
  16.构造函数不写create
  17.构造函数如果没有参数可以省略括号

#轮子
  1.标准库扩充
    underscore.js 扩充Array和Object相关API
    moment.js 扩充Date
    bluebird.js /hax/my-promise 实现Promise
    async.js 模拟了async操作符
    es5shim 用ES3语法部分实现了ES5特性
    handlebars.js 实现模板字符串功能
  2.DOM扩充
    jQuery.js操作DOM
    video.js操作video
    Fabric.js操作canvas
  3.UI组件
    纯CSS的UI组件 Bulma
    大而全的UI框架(CSS+JS) Bootstrap ElementUI
    垂直领域的轮播组件
      专门做轮播的 Swiper
      专门做输入提示的 typeahead.js
      专门做文件上传的 fine-uploader
      专门做 3D 瓦片效果的 vanilla-tilt.js
      专门做视差效果的 parallax.js
      专门做数据可视化的 D3.js
      专门做图表的 echarts.js
      专门做动画的 velocity.js
      专门做粒子效果的 particle.js
      专门做手势识别的 hammer.js
  4.编程思想的轮子
      实现 MVC 思想的 backbone.js
      实现 MVVM 思想的 AngularJS 1 和 Vue 1
      实现 Virtual DOM 的 React 和 Preact
      实现单向数据流（FLUX）思想的 Redux
      实现 Reactive 思想的 Rx.js
      实现 Rails 思想的 Ember.js
      实现函数式思想的 Ramda
  5.正交原则(对内)
      内容样式行为分离 不互相影响(xyz轴)
  6.面向接口编程(对外)
#代码重构
  1.代码优化三个基本原则
    易读性优先
    如果不是性能问题，就不要为了性能改写代码
    复杂性守恒原则：无论你怎么改写代码，复杂性是不会消失的
  2.程序员三大难题
    变量命名
    缓存失效
    循环边界
  3.命名规范
    注意词性:普通变量/属性用名词 bool用形容词/be动词/情态动词/hasX 普通函数/方法用动词开头 回调钩子函数用介词开头或者现在完成时 容易混淆加前缀 属性访问器可以用名词(get/set)
    注意一致性:介词一致性/顺序一致性/表里一致性(功能不能多也不能少)/时间一致性
  4.改代码
    使用函数来改代码
      将一坨代码放到一个函数里
      将代码依赖的外部变量作为参数
      将代码的输出作为函数的返回值
      给函数取一个合适的名字
      调用这个函数并传入参数
      这个函数里的代码如果超过 5 行，则依然有优化的空间，请回到第 1 步
    使用对象来改代码
      如果使用了函数改造法改造后，发现有太多的小函数，则可以使用对象讲这个函数串起来。
      记得我们讲过「this 是函数和对象的桥梁」吗，我们会用 this 来串联这个对象和所有函数。
  5.套路
    表驱动编程
      所有一一对应关系都可以用表来做
    自说明代码
      把别人关心得代码放在显眼的位置
  6.反例
    表里不一的代码
    过时的注释
    逻辑很简单，但是看起来很复杂的代码
    重复的代码
    相似的代码
    总是一起出现的代码
#MVC与双向数据绑定与单向绑定
  1.M负责数据(数据存储/请求/更新)
    V负责视图(渲染HTML 可接受参数定制数据)
    C负责逻辑(调度M和V层)
  2.发布订阅模式
    思路:on注册函数 添加到事件列表 然后通过emit传参触发
    delete 可以删除对象的属性
  3.解决重新渲染页面不保存数据的问题
    1.保存输入的数据(双向绑定)
    2.只渲染修改的部分(虚拟dom)
  4.Vue双向绑定流程
    1.只要JS改变了view.number或者view.name或view.n(注意Vue把data里的number/name/n放在了view上，没有view.data这东西)
    2.只要用户在input里输入了值,JS里的view.n就会刷新
    3.用methods方法替代Controller层
    4.用data替代model.data
  5.双向绑定有些反组件化
  6.用户数据单项绑定
    UI数据用双向绑定
  7.AngularJS双向绑定 input.onchange 并且封装一个函数对比数据修改前后
    dirty check 在所有能修改数据的地方封装一层函数监听
    Vue双向绑定 通过Object.defineProperty的get和set (bug 后添加的属性不会添加监听 无法监听一开始不存在的数据)
    Vue3.0 用Proxy
#数组操作
  1.Array.join(char) 把数组合并成用char拼接的字符串 返回字符串
  2.Array.slice(begin,end) 把数组裁切出begin到end下标的数组 返回字符串
      array = [].slice.call(arrayLike)  // 伪数组转数组
      array = Array.from(arrayLike)  // ES 6
  3.Array.sort((a,b)=>a-b)
  4.Array.forEach((item,index,array)=>{})
      forEach无法break
      forEach每次生成一个新的作用域(for循环只有一个作用域)
  5.Array.map((item,index,array)=>{})
  6.Array.filter((item,index,array)=>{})
  7.Array.reduce((item,index,array)=>{},init)
      以上四个方法均需要判断是否是类数组对象
      赋值全是浅拷贝
  8.Underscore.js 操作集合的库
    lodash.js
    tips:用函数防抖处理cd逻辑(闭包保存timer)
#Rx.js
  1.异步的一些问题
      异步难以跟踪数据变化
      异步无法try catch 只能在回调里处理
      异步事件可能内存泄露
  2.迭代器模式(要求变化)
      通过闭包记录当前次数 返回有next方法的对象
      ES6 Generator
  3.观察者模式(通知变化)
      发布订阅模式
      Object.observe(data,function(changes){})
      观察者就是迭代器(抽象)
  4.Observable可以表示
      事件
      数据请求
      动画
  5.takeUntil
      Rxjs不需要去取消订阅，只需要告诉系统订阅到什么情况为止就行了，就是在另一个事件出现时，系统自动取消上一个事件的订阅即可
      实际上很多人都不会去取消订阅，以至于出现内存泄露，比如我们经常监听window的onload事件，却基本没人去取消监听
      takeUntil可以代替取消订阅
#代码大全中的编程技巧
  1.第五章 软件构建中的设计
    设计是一个险恶(wicked)的问题
      险恶的问题就是那些只有通过解决或部分解决才能被明确的问题。
      你必须首先把这个问题「解决」一遍才能明确的定义这个问题。
    软件的首要技术使命：管理复杂度
      如果一个项目因为技术而失败，通常的原因就是技术太复杂导致失控。
      将大系统分解成小系统，保持函数短小等。
      高代价、低效率的设计源于：
            1. 用复杂的方法解决简单的问题
            2. 用简单但错误的方法解决复杂的问题
            3. 用不恰当的复杂方法解决复杂的问题
  2.第二十五章 代码调整策略
    一些无稽之谈
      代码行数越少，性能越高
      特定运算看你比其他快，性能好
      开发者应该不断优化代码
      程序的运行速度同其正确性一样重要
    编译器的优化可能比你写的代码更好
  3.第二十六章 代码调整技巧
    逻辑
      在知道答案后停止判断
      按照出现频率来调整判断顺序
      要做性能测试，不要盲目相信结论
      用表代替复杂分支
      惰性求值
    循环
      将不需要重复计算的逻辑外提
      使用哨兵值加速循环(push进循环数组 用while循环 减少循环判断次数)
      把最忙（循环次数多）的循环放在最内层
    其他
      削弱运算强度：用移位运算代替乘2或除2
      将一些值初始化：如一天是 86400 秒
      对每一次改进进行量化
  4.程序规模对构建的影响
      程序员的交流路径与程序员数量的关系
      采用文档交流
  5.管理构建
    鼓励良好的编码实践
      设定标准（编码规范、文档规范、checklist 等）
      每个项目两个人（结对、师徒、支援）
      Code Review
      提供最佳实践给人参考
      强调代码是共有财产
    需求变更和设计变更
      不要马上变更，累积一些再变更
      成立变更委员会，系统化地控制变更
      警惕官僚主义
    备份所有东西：源码、工具、需求、变更、设计、文档……
    如果进度落后了怎么办：
      期待后期赶上——不可能
      增加人手——火上浇油
      砍需求——最靠谱
    把程序员当人看
      程序员不是机器
      要有舒适的环境、要休息
      个体差异
      团队差异
      信仰问题
    管理/教育你的管理者
  6.自说明代码
    复述代码——无聊
    解释代码——改进代码
    标记——可能用的到 // todo  // fiexme
    概述代码——有用
    代码意图说明——指出要解决的问题
    传达代码无法表述的信息——非常重要
#Vue的常用技巧
  1.v-model是语法糖 并不是严格意义上的双向绑定
    只是DOM和input的事件监听和视图绑定的合并
    vue最后提供的双向数据绑定的语法糖
        $emit('upadate:selected',data)
        :selected="value"  @update:selected="selected=$event"
  2.Vue的渐进式
    可以继续操作DOM
    你可以很方便地做SEO
    你可以局部做单页面
    你可以整体做单页面
#HTTP
  1.server
    服务端
    你可以通过很多方式搭建一个 server
      Apache + PHP/Java/Python/Node.js
      Nginx + PHP/Java/Python/Node.js
      只用 Node.js
  2.client
      用户用来浏览网页的软件（GUI 或命令行均可）
      后端开发者的爬虫
      搜索引擎的爬虫
    client 也可以叫做用户代理，因为它帮用户发送请求。
    「用户代理」的英文是 user agent，「代理」的英文是 proxy，所以并不完全一样。
     proxy 是为了满足特定功能的 agent，这些功能包括加速访问、内容缓存、内容过滤、信息加密等；而 agent 则功能较广泛，如 Chrome 就是一个 user agent，能满足广泛的上网需求，curl 和爬虫也是 user agent，一般不能叫做 proxy。
  3.request
    请求
      第一部分 - 动词 路径 协议/版本号
      第二部分 - 一堆 key: value，用回车分割
      第三部分 - 回车，作用只有一个：分隔开第二部分和第四部分
      第四部分 - 随便什么内容都可以，内容的格式必须要第二部分里用 Content-Type 说明
  4.response
    响应
      第一部分 - 协议/版本号 状态码 状态信息
      第二部分 - 一堆 key: value，用回车分割
      第三部分 - 回车，作用只有一个：分隔开第二部分和第四部分
      第四部分 - 随便什么内容都可以，内容的格式必须要第二部分里用 Content-Type 说明
  5.浏览器缓存
    百度的缓存默认是十年
    入口文件不能加缓存
    使用 Etag 和 304 可以避免下载过程
    这并不是严格意义的缓存
  6.Cookie
    现代前端几乎不会去碰 Cookie
    如果需要多页面共享信息，请用 localStorage 或 sessionStorage
    Cookie 的所有知识都可以用维基百科查到
  7.Session
    Session 就是 server 为用户分配的一小段内存，用户的识别依据可以用 Cookie 保存（也可以不用 Cookie）
  8.反向代理
    server 根据请求中的信息，将请求分发到不同的地方，此 server 即为反向代理。
      以 Nginx 配置多域名网站为例
      以 server.js 转发请求为例
